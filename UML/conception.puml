@startuml Mastermind

title Conception Mastermind

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

package Mastermind
{
    /''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '                          main                           '
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/
    class MastermindApp{
        + {static} main(args: String[])
    }

    /''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '                         models                          '
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/
    package model
    {
        class MastermindFacade {
            + <<create>> MastermindFacade()
            + lancerPartie()
        }

        class Partie {
            - joueur: String
            # {static} nbManche: Integer
            # {static} nbPionsCombinaison: Integer
            # {static} maxTentatives: Integer
            # {static} nbPions: Integer
            + <<create>> Partie()
            + debutPartie()
            + finPartie()
            + setMode(mode : StrategyMode)
            + setNbManches(nbManches : Integer)
            + setNbPionCombinaison(NbPionsCombinaison : Integer)
            + setMaxTentatives(maxTentatives : Integer)
            + setNbPions(nbPions : Integer)
            + getMode() : StrategyMode
            + getNbManches() : Integer
            + getNbPionCombinaison() : Integer
            + getMaxTentatives() : Integer
            + getNbPions() : Integer
        }

        class Score {
            - scoreManches: Integer[*]
            - scoreTotal: Integer
            + <<create>> Score()
            + calculerScoreManche(indices : LigneIndice, mode : StrategyMode) : Integer
            + calculerScoreTotal(): Integer
            + getScoreManche(numManche : Integer) : Integer
            + getScoreManches() : Integer[*]
            + getScoreTotal() : Integer
        }

        class Manche {
            - numTentative: Integer
            + <<create>> Manche()
            + ajouterTentative(tentative: Combinaison)
            + verifierFinManche(): Boolean
            + estGagne() : Boolean
            + estDepasse() : Boolean
            + finManche()
        }

        class Combinaison {
            - {static} _combinaisonSecrete: Pions[*]
            - _combinaisonJoueur: Pions[*]
            + <<create>> Combinaison()
            + {static} genererCombinaisonSecrete(): Pions[*]
            + verifierCorrespondance(tentative: Pions[*]): Indice[*]
            + {static} getCombinaisonSecrete(): Pions[*]
            ° getCombinaisonJoueur(): Pions[*]
            + setCombinaisonJoueur(combinaisonJoueur: Pions)
            + addCombinaisonJoueur(choix: String)
        }

        class LigneIndices {
            + <<create>> LigneIndices()
            + getIndices(): Indice[*]
            + setIndices(indices: Indice)
            + estPositionCouleur(): Boolean
            + estCouleur(): Boolean
            + getNbPositionCouleur() : int
            + getNbCouleur() : int
        }

        class ModeFactory {
            + <<create>> ModeFactory()
            + createFacile() : StrategyMode
            + createClassique() : StrategyMode
            + createNumerique() : StrategyMode
        }

        enum Pions {
            +ROUGE
            +BLEU
            +VERT
            +JAUNE
            +ORANGE
            +VIOLET
            +BLANC
            +NOIR
        }

        enum Indice {
            +POSITIONCOULEUR
            +COULEUR
            +ABSENT
        }
    }

    /''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '                          view                           '
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/
    package view
    {
        interface StrategyMode {
            + select()
        }
        class Facile implements StrategyMode {
            + select()
        }

        class Classique implements StrategyMode {
            + select()
        }

        class Numerique implements StrategyMode {
            + select()
        }
    }

    /''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '                       controller                        '
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/
    package controller
    {
        class Settings {
            - nbManches: Integer
            - nbPionsCombinaison: Integer
            - nbTentatives: Integer
            - nbPions: Integer
            + <<create>> Settings()
            + getNbManches(): Integer
            + getNbPionsCombinaison(): Integer
            + getNbTentatives(): Integer
            + getNbPions(): Integer
        }
    }
}

/''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'                          lien                           '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/
MastermindApp ..> MastermindFacade : <<uses>>
MastermindFacade ..> Partie : <<uses>>
MastermindFacade ..> StrategyMode : <<uses>>
MastermindFacade ..> ModeFactory : <<uses>>
Partie *--> "3..5\n -_manches" Manche: > est composé de
Partie o-> "1\n-_mode" StrategyMode : > select
Partie *-> "1\n-_score" Score
Manche *-> "*\n -_indices" LigneIndices: > est composé de
Manche *--> "10..12\n -_tentatives" Combinaison: > est composé de
Manche *--> "1\n -_combinaison_secrete" Combinaison: > est composé de
LigneIndices --> "*\n -_indices" Indice: > est composé de
Combinaison o--> "4..6\n -_pions" Pions: > est composé de
ModeFactory ..> StrategyMode : <<use>>
ModeFactory ..> Facile : <<use>>
ModeFactory ..> Classique : <<use>>
ModeFactory ..> Numerique : <<use>>
@enduml