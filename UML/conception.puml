@startuml Mastermind

title Conception Mastermind

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

package Mastermind {
    package model
    {
        class Partie {
            - player : string
            - nb_manches : Integer
            - nb_pions_combinaison : Integer
            - max_tentatives : Integer
            - nb_pions : Integer
            + <<create>> Partie()
            + debut_partie()
            + fin_partie()
        }

        class Manche {
            - numTentative: Integer
            + <<create>> Manche()
            + ajouter_tentative(tentative: Combinaison)
            + verifier_fin_manche(): Boolean
            + est_gagne() : Boolean
            + est_depasse() : Boolean
            + fin_manche()
        }

        class Score {
            - score_manche: Integer[*]
            - score_total: Integer
            + <<create>> Score()
            + calculer_score_manche(indices : LigneIndice, mode : Strategy_mode)
            + calculer_score_total(): Integer
        }

        class Ligne_Indices {
            + <<create>> Ligne_Indices()
            + est_positioncouleur(): Boolean
            + est_couleur(): Boolean
        }

        enum Indice {
            +POSITIONCOULEUR
            +COULEUR
            +ABSENT
        }

        class Combinaison {
            + <<create>> Combinaison()
            + {static}generer_combinaison_secrete(): Combinaison
            + verifier_correspondance(tentative: Combinaison): Ligne_Indices
        }

        interface Strategy_mode {
            + select()
        }

        enum Pions {
            +ROUGE
            +BLEU
            +VERT
            +JAUNE
            +ORANGE
            +VIOLET
            +BLANC
            +NOIR
        }

        class Mode_factory {
            + createMode(type: String): Strategy_mode
        }
    }

    class Mastermind_app {
        + {static} main(args: String[])
    }
    package view
    {
        class Facile implements Strategy_mode {
            + select()
        }

        class Classique implements Strategy_mode {
            + select()
        }

        class Numerique implements Strategy_mode {
            + select()
        }
    }
    package controller
    {
        class Settings {
            - nb_manches: Integer
            - nb_pions_combinaison: Integer
            - nb_tentatives: Integer
            - nb_pions: Integer
            + <<create>> Settings()
            + get_nb_manches(): Integer
            + get_nb_pions_combinaison(): Integer
            + get_nb_tentatives(): Integer
            + get_nb_pions(): Integer
        }
    }
}

' Liens
Partie *--> "3..5\n -_manches" Manche: > est composé de
Ligne_Indices --> "*\n -_indices" Indice: > est composé de
Manche *-> "*\n -_indices" Ligne_Indices: > est composé de
Manche *--> "10..12\n -_tentatives" Combinaison: > est composé de
Manche *--> "1\n -_combinaison_secrete" Combinaison: > est composé de
Combinaison o--> "4..6\n -_pions" Pions: > est composé de
Ligne_Indices --> "1\n -_combinaison_secrete" Combinaison: > possède

Mastermind_app --> "1\n -_partie" Partie: > lance
Partie o-> "1\n-_mode" Strategy_mode : > select 
Mastermind_app ..> Strategy_mode : <<uses>>
Mode_factory ..> Facile: <<use>>
Mode_factory ..> Classique: <<use>>
Mode_factory ..> Numerique: <<use>>
Mode_factory ..> Strategy_mode: <<use>>

Partie *-> "1\n-_score" Score

' nb_pions : [4,8,12]

@enduml